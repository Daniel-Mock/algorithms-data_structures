###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################




from collections import defaultdict
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        #edge case empty lst
        if len(nums) == 0: return []

        nums_sorted = sorted(nums)
        ret_lst = []
        count = 0

        #edge case 2 vals
        if len(nums_sorted) == 2 and nums_sorted[0] == nums_sorted[1]:
            if nums_sorted[0] == 1 and nums_sorted[1] != 2:
                return [2]
            else: return [1]

        #edge case starts with num > 1
        if nums_sorted[0] > 1:
            num = nums_sorted[0]
            for i in range(1,num):
                ret_lst.append(i)

        for loc, val in enumerate(nums_sorted[:-1]):
            if nums_sorted[loc+1] == val:
                count += 1
            elif nums_sorted[loc+1] == val+1:
                pass
            else:
                iter = nums_sorted[loc+1]-val
                append_val = val
                for i in range(iter-1):
                    append_val +=1
                    ret_lst.append(append_val)
        i=1
        for _ in range(count):
            if len(nums_sorted) >= nums_sorted[-1] + i:
                ret_lst.append(nums_sorted[-1]+i)
            i+=1
        return ret_lst
