###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None




class Solution:
    def insertionSortList(self, head: ListNode) -> ListNode:
        dummy = ListNode(0)
        dummy.next = nodeToInsert = head

        while head and head.next:
            if head.val > head.next.val:
                nodeToInsert = head.next

                #init prev to head to find node that goes before the new insert
                nodeToInsertPrev = dummy
                while nodeToInsertPrev.next.val < nodeToInsert.val:
                    nodeToInsertPrev = nodeToInsertPrev.next

                #reroute the linked list flow from the current position
                head.next = nodeToInsert.next

                #Insert node to new position
                nodeToInsert.next = nodeToInsertPrev.next
                nodeToInsertPrev.next = nodeToInsert

            else:
                head = head.next

        return dummy.next
