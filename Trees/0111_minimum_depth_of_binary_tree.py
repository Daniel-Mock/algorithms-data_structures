###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def minDepth(self, root: TreeNode) -> int:
        if root is None: return 0

        if root.left is None and root.right is None:
            return 1
        if root.left is None and root.right:
            return self.minDepth(root.right) + 1
        if root.right is None and root.left:
            return self.minDepth(root.left) + 1
        if root.right and root.left:
            return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
    '''    if root is None: return 0

        return(self.recurse(root, 1))

    def recurse(self, node, height):
        if node is None:
            return height-1
        if node.left is None and node.right is None:
            return height
        left_height = self.recurse(node.left, height+1)
        right_height = self.recurse(node.right, height+1)

        return min(left_height, right_height)
    '''
