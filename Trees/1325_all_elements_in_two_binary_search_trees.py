###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        return_list1 = []
        #return_list2 = []
        stack = []

        if root1 is not None:
            node = root1
            while True:

                if node is not None:
                    stack.append(node)
                    node = node.left

                elif(stack):
                    node = stack.pop()
                    return_list1.append(node.val)
                    node = node.right
                else:
                    if root2 is None: return return_list1
                    break

        if root2 is not None:
            node = root2
            while True:

                if node is not None:
                    stack.append(node)
                    node = node.left

                elif(stack):
                    node = stack.pop()
                    return_list1.append(node.val)
                    node = node.right
                else:
                    if root1 is None: return return_list1
                    break
        return sorted(return_list1)
    #########################################################
    #previous Approach below
        '''return_list1 = []
        return_list2 = []
        stack = []

        if root1 is not None:
            node = root1
            while True:

                if node is not None:
                    stack.append(node)
                    node = node.left

                elif(stack):
                    node = stack.pop()
                    return_list1.append(node.val)
                    node = node.right
                else:
                    if root2 is None: return return_list1
                    break

        if root2 is not None:
            node = root2
            while True:

                if node is not None:
                    stack.append(node)
                    node = node.left

                elif(stack):
                    node = stack.pop()
                    return_list2.append(node.val)
                    node = node.right
                else:
                    if root1 is None: return return_list2
                    break

        lst = {}
        for val in return_list1:
            if val in lst:
                lst[val]+=1
            else:
                lst[val] = 1

        for val in return_list2:
            if val in lst:
                lst[val]+=1
            else:
                lst[val] = 1
        new_lst = []
        for val in sorted(lst):
            #print(val, lst[val])
            for _ in (range(lst[val])):
                new_lst.append(val)
        return new_lst
        '''
