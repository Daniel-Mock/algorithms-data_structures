###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        if not lists: return
        if len(lists) == 1:
            return lists[0]

        head_ref = node = ListNode()
        while len(lists) > 1:
            min_val = math.inf
            for index, lst in enumerate(lists):
                if lst is None:
                    continue
                if lst.val < min_val:
                    min_val = lst.val
                    min_index = index
                    print(f"min_val: {min_val}")
            if min_val == math.inf:
                return head_ref.next
            else:
                node.next = ListNode(min_val)
                node = node.next
                lists[min_index] = lists[min_index].next
                if lists[min_index] is None:
                    lists.pop(min_index)
        node.next = lists[0]
        return head_ref.next
