###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        #take care of empty lists
        if head is None or head.next is None: return head

        #dummy list for edge cases
        dummy = ListNode(None)
        dummy.next = head

        #2 pointers (prev & node)(points to previous node & curr node)
        prev = dummy
        node = dummy.next

        #step through the list - if val changes, stop prev pointer and move node pointer to check for duplicate values.
		#Keep moving node pointer until encounter end of duplicate values.
		#Set prev.next = node.next (this sets prev.next to the first node after all the duplicate vals).
		#If end of list, break.
        while node is not None and node.next is not None:
            if prev.val != node.val and node.val == node.next.val:
                while node.val == node.next.val:
                    node = node.next
                    if node.next is None: break
                prev.next = node.next
                node = node.next
            else:
                prev = node
                node = node.next
