###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        #2 pointers used to reverse direction of list 1 node at a time
        if head is None: return
        if head.next is None:
            return head

        prev_node = None
        while head:
            new_node = ListNode(val=head.val)
            new_node.next = prev_node
            prev_node = new_node
            head = head.next
        return prev_node

        #create stack of new nodes, pop from stack and build new list
        '''
        if head is None: return
        if head.next is None:
            return head
        stack = []
        while head:
            new_node = ListNode(val=head.val)
            stack.append(new_node)
            head = head.next
        head = stack.pop()
        head_ref = head

        while stack:
            head.next = stack.pop()
            head = head.next
        return head_ref
        '''
