###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################

"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = []):
        self.val = val
        self.neighbors = neighbors
"""
class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':

        if node is None: return node
        queue = [node]
        dic = {}
        root = Node(node.val, [])
        dic[node] = root

        while len(queue) > 0:
            curr = queue.pop(0)
            for neighbor in curr.neighbors:
                if neighbor not in dic:
                    new_node = Node(neighbor.val, [])
                    dic[neighbor] = new_node
                    queue.append(neighbor)
                dic[curr].neighbors.append(dic[neighbor])
        return(root)





        
