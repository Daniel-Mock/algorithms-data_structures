###########################################################################
#                                                                         #
# Author: Daniel Mock                                                     #
#                                                                         #
# Purpose: To document progress in learning algorithms & data structures  #
#                                                                         #
# References: This question was generated by leetcode.com. The solution   #
# to the question was generated by Daniel Mock.                           #
#                                                                         #
###########################################################################


from collections import defaultdict

class Solution:
    def networkDelayTime(self, times: List[List[int]], N: int, K: int) -> int:
        #Dikjstra's shortest path

        #heap to keep track of next shortest path
        heap = [(0, K)]

        #keep track of visited nodes. Use set since you don't care
        #which order they're in
        visited = set()

        #keep a distance map to keep track of distance
        #to each node from source node
        #float('inf') sets the value to infinity in python
        dist = {i:float('inf') for i in range(1, N+1)} #why 1 to N+1??
        dist[K] = 0
        #adj. list to represent the graph
        graph = collections.defaultdict(list)
        for u, v, weight in times:
            graph[u].append((weight, v))

        while heap:
            #pop from heap the weight & curr node
            weight, node = heapq.heappop(heap)

            if node in visited:
                continue

            visited.add(node)

            #if we've covered every node, break
            if len(visited) == N:
                return weight

            for currweight, v in graph[node]:
                if dist[v] > weight + currweight and v not in visited:
                    dist[v] = weight+currweight
                    heapq.heappush(heap,(weight+currweight, v))
        return -1
